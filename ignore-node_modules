#!/usr/bin/env bash

##
# Ignores node_modules directories from macOS Spotlight search
##

set -o errexit

showUsage() {
	cat <<-END
		Ignores node_modules directories from macOS Spotlight search

		Usage:
		    ignore-node_modules [path]

		Options:
		    -h, --help     output usage information and exit
		    -V, --version  output the version number and exit

		Positional arguments:
		    path   directory to search for node_modules (defaults to current directory)
	END
}

findNodeModules() {
	local searchDirectory="$1"

	# Find top-level node_modules, ignoring nested node_modules
	find "${searchDirectory}" -type d -name 'node_modules' -prune || true
}

main() {
	local -i alreadyIgnoredCount=0
	local -i directoryCount=0
	local -a nodeModules
	local searchDirectory="${PWD}"
	local -r versionString="2.0.0"

	# Parse arguments
	while (($# > 0)); do
		local arg="$1"

		case $arg in
			-h | --help)
				showUsage
				exit
				;;
			-V | --version)
				echo "${versionString}"
				exit
				;;
			-*)
				printf "Error: unrecognized argument '%s'\n" "$arg" >&2
				exit 1
				;;

			*) searchDirectory="$arg" ;;
		esac

		shift
	done

	# Ensure directory actually exists
	if [[ ! -d ${searchDirectory} ]]; then
		printf 'Error: failed to search in directory "%s"\n' "$searchDirectory" >&2
		exit 1
	fi

	# Find top-level node_modules
	nodeModules="$(findNodeModules "${searchDirectory}")"

	# Add special file to any that don't have it
	for directory in ${nodeModules[*]}; do
		if [[ ! -e "${directory}/.metadata_never_index" ]]; then
			touch "${directory}/.metadata_never_index"
			((directoryCount += 1))
		else
			((alreadyIgnoredCount += 1))
		fi
	done

	if ((alreadyIgnoredCount == 0)) && ((directoryCount == 0)); then
		echo 'No node_modules found in directory'
	else
		printf 'Ignored %i directories (%i already ignored)\n' "$directoryCount" "$alreadyIgnoredCount"
	fi
}

main "$@"
